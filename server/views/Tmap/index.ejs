<!DOCTYPE html>
<html>

<head>
	<%-include("../Tmapheader")%>
	<script type="text/javascript">
		let placeInfo = {};
		var map;
		var markerInfo;
		//출발지,도착지 마커
		var marker_s, marker_e, marker_p;
		//경로그림정보
		var drawInfoArr = [];
		var drawInfoArr2 = [];

		var chktraffic = [];
		var resultdrawArr = [];
		var resultMarkerArr = [];

		function initTmap() {
			// 1. 지도 띄우기
			map = new Tmapv2.Map("map_div", {
				center: new Tmapv2.LatLng(37.49241689559544, 127.03171389453507),
				width: "100%",
				height: "400px",
				zoom: 11,
				zoomControl: true,
				scrollwheel: true
			});
			/*marker_s = new Tmapv2.Marker(
						{
							position : new Tmapv2.LatLng(37.566567545861645,
									126.9850380932383),
							icon : "http://tmapapis.sktelecom.com/upload/tmap/marker/pin_r_m_s.png",
							iconSize : new Tmapv2.Size(24, 38),
							map : map
						});
		
				//도착
				marker_e = new Tmapv2.Marker(
						{
							position : new Tmapv2.LatLng(37.403049076341794,
									127.10331814639885),
							icon : "http://tmapapis.sktelecom.com/upload/tmap/marker/pin_r_m_e.png",
							iconSize : new Tmapv2.Size(24, 38),
							map : map
            });
		*/
			// 2. 시작, 도착 심볼찍기
			// 시작
			//서울 , 은평, 길현, 397

			$("#findDep").submit(event => {
				event.preventDefault();

				const city = $('#city').val();
				const dong = $('#dong').val();
				const roadNum = $('#roadNum').val();

				const data = {
					city,
					dong,
					roadNum,
				};

				//const destination = $('#destination').val();
				loadGetAddressFromLonLat(data);

			})
			$("#findDet").submit(event => {
				event.preventDefault();

				const city = $('#city').val();
				const dong = $('#dong').val();
				const roadNum = $('#roadNum').val();

				const data = {
					city,
					dong,
					roadNum,
				};

				//const destination = $('#destination').val();
				loadGetAddressFromLonLat(data);

			})



			function loadGetAddressFromLonLat(event) {
				// TData 객체 생성
				var tData = new Tmapv2.extension.TData();

				var optionObj = {
					coordType: "WGS84GEO",
					addressFlag: "F02" //응답좌표 타입 옵션 설정 입니다.
				};

				var params = {
					onComplete: onComplete, //데이터 로드가 성공적으로 완료 되었을때 실행하는 함수 입니다.
					onProgress: onProgress, //데이터 로드 중에 실행하는 함수 입니다.
					onError: onError //데이터 로드가 실패했을때 실행하는 함수 입니다.
				};

				// TData 객체의 지오코딩 함수
				tData.getGeoFromAddressJson(event.city, event.dong, event.roadNum, null, optionObj,
					params);

			}

			function onComplete() {
				console.log(this._responseData); //json으로 데이터를 받은 정보들을 콘솔창에서 확인할 수 있습니다.

				const lat = this._responseData.coordinateInfo.newLat; //json으로 데이터를 받은 정보에서 경도정보를 추출합니다.
				const lon = this._responseData.coordinateInfo.newLon; //json으로 데이터를 받은 정보에서 위도정보를 추출합니다.
				const builName = this._responseData.coordinateInfo.newBuildingName; //json으로 받은거 에서 빌딩이름 -> 사용자 확인용

				placeInfo = {
					lat,
					lon,
					builName
				};
				console.log(lon, lat);
				var marker = new Tmapv2.Marker({
					position: new Tmapv2.LatLng(lat, lon)
				});

				marker.setMap(map);
				checkLocation();
				map.setCenter(new Tmapv2.LatLng(lat, lon));
			}

			function checkLocation() {
				$('.ft_select_wrap').append(
					`<div class="checkDP"><span>${placeInfo.builName}입니까?</span><button>check</button></div>`);
				$('#findDep').remove();
			}



			//데이터 로드중 실행하는 함수입니다.
			function onProgress() {

			}

			//데이터 로드 중 에러가 발생시 실행하는 함수입니다.
			function onError() {
				alert("onError");
			}

			// 3. 경로탐색 API 사용요청

			$("#find_btn")
				.click(
					function () {

						//기존 맵에 있던 정보들 초기화
						resettingMap();

						//JSON TYPE EDIT [S]
						$
							.ajax({
								type: "POST",
								url: "https://apis.openapi.sk.com/tmap/routes?version=1&format=json&callback=result",
								async: false,
								data: {
									"appKey": "l7xxabd2c64eec2549daabdf41bb048a9c14",
									"startX": "126.9850380932383",
									"startY": "37.566567545861645",
									"endX": "127.10331814639885",
									"endY": "37.403049076341794",
									"reqCoordType": "WGS84GEO",
									"resCoordType": "EPSG3857",
								},
								success: function (response) {


									var resultData = response.features;

									for (var i in resultData) { //for문 [S]
										var geometry = resultData[i].geometry;
										var properties = resultData[i].properties;

										if (geometry.type == "LineString") {
											for (var j in geometry.coordinates) {
												// 경로들의 결과값들을 포인트 객체로 변환 
												var latlng = new Tmapv2.Point(
													geometry.coordinates[j][0],
													geometry.coordinates[j][1]);
												// 포인트 객체를 받아 좌표값으로 변환
												var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(
													latlng);
												// 포인트객체의 정보로 좌표값 변환 객체로 저장
												var convertChange = new Tmapv2.LatLng(
													convertPoint._lat,
													convertPoint._lng);
												// 배열에 담기
												drawInfoArr
													.push(convertChange);
											}
											drawLine(drawInfoArr,
												"0");
										} else {

											var markerImg = "";
											var pType = "";

											if (properties.pointType == "S") { //출발지 마커
												markerImg =
													"http://tmapapis.sktelecom.com/upload/tmap/marker/pin_r_m_s.png";
												pType = "S";
											} else if (properties.pointType == "E") { //도착지 마커
												markerImg =
													"http://tmapapis.sktelecom.com/upload/tmap/marker/pin_r_m_e.png";
												pType = "E";
											} else { //각 포인트 마커
												markerImg = "http://topopen.tmap.co.kr/imgs/point.png";
												pType = "P"
											}

											// 경로들의 결과값들을 포인트 객체로 변환 
											var latlon = new Tmapv2.Point(
												geometry.coordinates[0],
												geometry.coordinates[1]);
											// 포인트 객체를 받아 좌표값으로 다시 변환
											var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(
												latlon);

											var routeInfoObj = {
												markerImage: markerImg,
												lng: convertPoint._lng,
												lat: convertPoint._lat,
												pointType: pType
											};

											// Marker 추가
											addMarkers(routeInfoObj);
										}
									} //for문 [E]

								},
								error: function (request, status, error) {
									console.log("code:" +
										request.status + "\n" +
										"message:" +
										request.responseText +
										"\n" + "error:" + error);
								}
							});
						//JSON TYPE EDIT [E]
					});
		}

		function addComma(num) {
			var regexp = /\B(?=(\d{3})+(?!\d))/g;
			return num.toString().replace(regexp, ',');
		}

		//마커 생성하기
		function addMarkers(infoObj) {
			var size = new Tmapv2.Size(24, 38); //아이콘 크기 설정합니다.

			if (infoObj.pointType == "P") { //포인트점일때는 아이콘 크기를 줄입니다.
				size = new Tmapv2.Size(8, 8);
			}

			marker_p = new Tmapv2.Marker({
				position: new Tmapv2.LatLng(infoObj.lat, infoObj.lng),
				icon: infoObj.markerImage,
				iconSize: size,
				map: map
			});

			resultMarkerArr.push(marker_p);
		}

		//라인그리기
		function drawLine(arrPoint, traffic) {
			var polyline_;

			polyline_ = new Tmapv2.Polyline({
				path: arrPoint,
				strokeColor: "#DD0000",
				strokeWeight: 6,
				map: map
			});
			resultdrawArr.push(polyline_);

		}

		//초기화 기능
		function resettingMap() {
			//기존마커는 삭제
			marker_s.setMap(null);
			marker_e.setMap(null);

			if (resultMarkerArr.length > 0) {
				for (var i = 0; i < resultMarkerArr.length; i++) {
					resultMarkerArr[i].setMap(null);
				}
			}

			if (resultdrawArr.length > 0) {
				for (var i = 0; i < resultdrawArr.length; i++) {
					resultdrawArr[i].setMap(null);
				}
			}

			chktraffic = [];
			drawInfoArr = [];
			resultMarkerArr = [];
			resultdrawArr = [];
		}
		//서울 , 은평, 길현, 397
	</script>

</head>

<body onload="initTmap();">
	<%-include("../navbar")%>
	<div class="w3-main" style="margin-left: 300px; margin-top: 43px;">
	<div class="ft_area">
		<div class="ft_select_wrap">
			<form id="findDep">
				departure
				<input id="city"></input>
				<input id="dong"></input>
				<input id="roadNum"></input>
				<button id="submitBtn">get LatLng</button>
			</form>
			destination
			<form id="findDet">
				<input id="city"></input>
				<input id="dong"></input>
				<input id="roadNum"></input>
				<button id="submitBtn">get LatLng</button>
			</form>
			<button id="find_btn">적용하기</button>
		</div>
		<div class="map_act_btn_wrap clear_box"></div>
		<div class="clear"></div>
	</div>

	<div id="map_wrap" class="map_wrap">
		<div id="map_div"></div>
	</div>
	<div class="map_act_btn_wrap clear_box"></div>
	<p id="result"></p>
	<br />
	</div>
</body>

</html>